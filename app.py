#!/usr/bin/env python3


"""
Streamlit application for financial simulation of SAS France & SARL Senegal
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from config.parameters import DEFAULT_PARAMS
from model.simulation import SimulationFinanciere
from visualization.streamlit_plots import (
    streamlit_evolution_ca_resultats,
    streamlit_repartition_benefices,
    streamlit_comparaison_scenarios,
    streamlit_repartition_couts,
    streamlit_repartition_couts_pourcentage
)


st.set_page_config(
    page_title="Simulation Financi√®re ESN",
    page_icon="üíº",
    layout="wide",
    initial_sidebar_state="expanded",
)


st.title("Simulation Financi√®re SAS France & SARL S√©n√©gal")
st.markdown("Cette application permet de simuler et visualiser les r√©sultats financiers d'un mod√®le SAS France / SARL S√©n√©gal.")


with st.expander("Instructions d'utilisation", expanded=True):
    st.markdown("""
    ### Comment utiliser cette application

    1. **Ajustez les param√®tres** dans la barre lat√©rale √† gauche selon vos besoins
    2. **Personnalisez le sc√©nario 2** pour comparer diff√©rentes configurations
    3. **Cliquez sur 'Ex√©cuter la simulation'** pour lancer les calculs
    4. **Explorez les r√©sultats** dans les diff√©rents onglets:
       - **R√©sultats**: Tableaux de donn√©es et m√©triques cl√©s
       - **Visualisations**: Graphiques d'analyse des r√©sultats
       - **Comparaison**: Comparaison entre les deux sc√©narios
    5. **T√©l√©chargez les donn√©es** au format CSV pour une analyse plus approfondie

    Vous pouvez √† tout moment r√©initialiser les param√®tres en cliquant sur le bouton "R√©initialiser les param√®tres" dans la barre lat√©rale.
    """)


if 'params' not in st.session_state:
    st.session_state.params = DEFAULT_PARAMS.copy()


st.sidebar.title("Param√®tres de simulation")


def param_widget(label, key, min_value=None, max_value=None, step=None, format=None, help=None):
    value = st.session_state.params[key]


    if isinstance(value, bool):
        return st.sidebar.checkbox(label, value, key=key, help=help)
    elif isinstance(value, int):
        return st.sidebar.number_input(label, min_value=min_value, max_value=max_value, value=value, step=step or 1, key=key, help=help)
    elif isinstance(value, float):
        if key.startswith('taux_'):

            value_percent = value * 100
            min_value_percent = (min_value or 0.0) * 100
            max_value_percent = (max_value or 1.0) * 100
            step_percent = (step or 0.01) * 100

            result_percent = st.sidebar.slider(label,
                                     min_value=min_value_percent,
                                     max_value=max_value_percent,
                                     value=value_percent,
                                     step=step_percent,
                                     format="%g%%",
                                     key=key,
                                     help=help)


            return result_percent / 100
        else:
            return st.sidebar.number_input(label, min_value=min_value, max_value=max_value, value=value, step=step or 0.1, format=format, key=key, help=help)
    else:
        return st.sidebar.text_input(label, value, key=key, help=help)

with st.sidebar.expander("Param√®tres g√©n√©raux", expanded=True):
    st.session_state.params['nb_annees'] = param_widget("Nombre d'ann√©es de simulation", 'nb_annees', min_value=1, max_value=10, help="Dur√©e de la simulation en ann√©es")
    st.session_state.params['taux_is_france'] = param_widget("Taux d'imposition en France", 'taux_is_france', min_value=0.0, max_value=0.5, help="Taux d'imp√¥t sur les soci√©t√©s en France")
    st.session_state.params['taux_is_senegal'] = param_widget("Taux d'imposition au S√©n√©gal", 'taux_is_senegal', min_value=0.0, max_value=0.5, help="Taux d'imp√¥t sur les soci√©t√©s au S√©n√©gal")
    st.session_state.params['taux_charges_patronales'] = param_widget("Taux de charges patronales", 'taux_charges_patronales', min_value=0.0, max_value=0.5, help="Taux de charges patronales au S√©n√©gal")
    st.session_state.params['marge_securite'] = param_widget("Marge de s√©curit√©", 'marge_securite', min_value=0.0, max_value=0.5, help="Marge de s√©curit√© pour la SARL (%)")


with st.sidebar.expander("Param√®tres de facturation", expanded=False):
    st.session_state.params['tjm_dev'] = param_widget("Tarif journalier d√©veloppeur (‚Ç¨)", 'tjm_dev', min_value=100, max_value=800, help="Tarif journalier moyen factur√© pour un d√©veloppeur")
    st.session_state.params['tjm_lead'] = param_widget("Tarif journalier lead technique (‚Ç¨)", 'tjm_lead', min_value=100, max_value=1000, help="Tarif journalier moyen factur√© pour un lead technique")
    st.session_state.params['tjm_cdp'] = param_widget("Tarif journalier chef de projet (‚Ç¨)", 'tjm_cdp', min_value=100, max_value=1000, help="Tarif journalier moyen factur√© pour un chef de projet")
    st.session_state.params['taux_occupation_dev'] = param_widget("Taux d'occupation des d√©veloppeurs", 'taux_occupation_dev', min_value=0.0, max_value=1.0, help="Pourcentage du temps facturable pour les d√©veloppeurs")
    st.session_state.params['taux_occupation_lead'] = param_widget("Taux d'occupation du lead", 'taux_occupation_lead', min_value=0.0, max_value=1.0, help="Pourcentage du temps facturable pour le lead technique")
    st.session_state.params['taux_occupation_cdp'] = param_widget("Taux d'occupation du chef de projet", 'taux_occupation_cdp', min_value=0.0, max_value=1.0, help="Pourcentage du temps facturable pour le chef de projet")
    st.session_state.params['jours_facturable_mois'] = param_widget("Jours facturables par mois", 'jours_facturable_mois', min_value=1, max_value=23, help="Nombre de jours facturables par mois")


with st.sidebar.expander("Param√®tres de salaires", expanded=False):
    st.session_state.params['salaire_dev'] = param_widget("Salaire mensuel d√©veloppeur (‚Ç¨)", 'salaire_dev', min_value=500, max_value=3000, help="Salaire mensuel moyen d'un d√©veloppeur")
    st.session_state.params['salaire_lead'] = param_widget("Salaire mensuel lead technique (‚Ç¨)", 'salaire_lead', min_value=500, max_value=4000, help="Salaire mensuel du lead technique")
    st.session_state.params['salaire_cdp'] = param_widget("Salaire mensuel chef de projet (‚Ç¨)", 'salaire_cdp', min_value=500, max_value=3000, help="Salaire mensuel du chef de projet")
    st.session_state.params['salaire_rh'] = param_widget("Salaire mensuel RH (‚Ç¨)", 'salaire_rh', min_value=500, max_value=2000, help="Salaire mensuel du responsable RH")


with st.sidebar.expander("Param√®tres d'√©volution des effectifs", expanded=False):
    st.session_state.params['effectif_dev_initial'] = param_widget("Nombre initial de d√©veloppeurs", 'effectif_dev_initial', min_value=1, max_value=20, help="Nombre de d√©veloppeurs au d√©marrage")
    st.session_state.params['ajout_dev_par_trimestre'] = param_widget("Ajout de d√©veloppeurs par trimestre", 'ajout_dev_par_trimestre', min_value=0, max_value=10, help="Nombre de d√©veloppeurs ajout√©s chaque trimestre")
    st.session_state.params['trimestre_ajout_support'] = param_widget("Trimestre d'ajout des postes support", 'trimestre_ajout_support', min_value=1, max_value=12, help="Trimestre √† partir duquel les postes support sont ajout√©s")


with st.sidebar.expander("Param√®tres de frais fixes", expanded=False):
    st.session_state.params['frais_fixes_annee1'] = param_widget("Frais fixes mensuels ann√©e 1 (‚Ç¨)", 'frais_fixes_annee1', min_value=0, max_value=10000, help="Frais fixes mensuels pour la premi√®re ann√©e")
    st.session_state.params['frais_fixes_annee2'] = param_widget("Frais fixes mensuels ann√©e 2 (‚Ç¨)", 'frais_fixes_annee2', min_value=0, max_value=15000, help="Frais fixes mensuels pour la deuxi√®me ann√©e")
    st.session_state.params['frais_fixes_annee3'] = param_widget("Frais fixes mensuels ann√©e 3 (‚Ç¨)", 'frais_fixes_annee3', min_value=0, max_value=20000, help="Frais fixes mensuels pour la troisi√®me ann√©e")


if st.sidebar.button("R√©initialiser les param√®tres"):
    st.session_state.params = DEFAULT_PARAMS.copy()
    st.experimental_rerun()


simulation = SimulationFinanciere(st.session_state.params)


if 'scenario2_params' not in st.session_state:
    st.session_state.scenario2_params = DEFAULT_PARAMS.copy()

    st.session_state.scenario2_params['salaire_dev'] = 1500   # +50%
    st.session_state.scenario2_params['salaire_lead'] = 2000  # +33%


with st.sidebar.expander("Param√®tres du sc√©nario 2", expanded=False):
    st.markdown("**Personnalisation du sc√©nario de comparaison**")


    def param_widget_scenario2(label, key, min_value=None, max_value=None, step=None, format=None, help=None):
        value = st.session_state.scenario2_params[key]


        if isinstance(value, bool):
            return st.checkbox(label, value, key=f"s2_{key}", help=help)
        elif isinstance(value, int):
            return st.number_input(label, min_value=min_value, max_value=max_value, value=value, step=step or 1, key=f"s2_{key}", help=help)
        elif isinstance(value, float):
            if key.startswith('taux_'):

                return st.slider(label, min_value=min_value or 0.0, max_value=max_value or 1.0, value=value, step=step or 0.01, format=format or "%.0f%%", key=f"s2_{key}", help=help)
            else:
                return st.number_input(label, min_value=min_value, max_value=max_value, value=value, step=step or 0.1, format=format, key=f"s2_{key}", help=help)
        else:
            return st.text_input(label, value, key=f"s2_{key}", help=help)


    st.session_state.scenario2_params['salaire_dev'] = param_widget_scenario2("Salaire mensuel d√©veloppeur (‚Ç¨)", 'salaire_dev', min_value=500, max_value=3000)
    st.session_state.scenario2_params['salaire_lead'] = param_widget_scenario2("Salaire mensuel lead technique (‚Ç¨)", 'salaire_lead', min_value=500, max_value=4000)
    st.session_state.scenario2_params['tjm_dev'] = param_widget_scenario2("Tarif journalier d√©veloppeur (‚Ç¨)", 'tjm_dev', min_value=100, max_value=800)
    st.session_state.scenario2_params['taux_occupation_dev'] = param_widget_scenario2("Taux d'occupation des d√©veloppeurs", 'taux_occupation_dev', min_value=0.0, max_value=1.0)


    if st.button("Copier les param√®tres du sc√©nario 1"):
        st.session_state.scenario2_params = st.session_state.params.copy()
        st.experimental_rerun()

simulation2 = SimulationFinanciere(st.session_state.scenario2_params)


if st.button("Ex√©cuter la simulation"):
    with st.spinner("Calcul des r√©sultats en cours..."):
        simulation.run_simulation()
        simulation2.run_simulation()


        tab1, tab2, tab3 = st.tabs(["R√©sultats", "Visualisations", "Comparaison"])

        with tab1:
            st.subheader("R√©sultats annuels")
            st.dataframe(simulation.resultats_annuels)


            csv_annuels = simulation.resultats_annuels.to_csv(index=True)
            st.download_button(
                label="T√©l√©charger les r√©sultats annuels (CSV)",
                data=csv_annuels,
                file_name="resultats_annuels.csv",
                mime="text/csv",
            )

            st.subheader("R√©sultats trimestriels")
            st.dataframe(simulation.resultats)


            csv_trimestriels = simulation.resultats.to_csv(index=True)
            st.download_button(
                label="T√©l√©charger les r√©sultats trimestriels (CSV)",
                data=csv_trimestriels,
                file_name="resultats_trimestriels.csv",
                mime="text/csv",
            )


            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("R√©sultat net total", f"{simulation.resultats_annuels['Resultat_Net_Consolide'].sum():,.0f} ‚Ç¨")
            with col2:
                st.metric("Taux de marge moyen", f"{simulation.resultats_annuels['Taux_Marge_Nette'].mean():.1%}")
            with col3:
                st.metric("Effectif final", f"{simulation.resultats['Nb_Developpeurs'].iloc[-1] + simulation.resultats['Nb_Lead'].iloc[-1] + simulation.resultats['Nb_CDP'].iloc[-1] + simulation.resultats['Nb_RH'].iloc[-1]}")

        with tab2:

            viz_tab1, viz_tab2, viz_tab3, viz_tab4, viz_tab5, viz_tab6 = st.tabs([
                "√âvolution CA et r√©sultats",
                "R√©partition b√©n√©fices",
                "R√©partition des co√ªts",
                "Analyse sensibilit√©",
                "√âvolution effectifs",
                "Point mort et ROI"
            ])

            with viz_tab1:
                st.subheader("√âvolution trimestrielle du CA et des r√©sultats")
                fig_ca = streamlit_evolution_ca_resultats(simulation)
                st.pyplot(fig_ca)

            with viz_tab2:
                st.subheader("R√©partition des b√©n√©fices entre SAS et SARL")
                fig_benef = streamlit_repartition_benefices(simulation)
                st.pyplot(fig_benef)

            with viz_tab3:
                st.subheader("R√©partition des co√ªts par rapport au chiffre d'affaires")


                view_type = st.radio(
                    "Afficher les co√ªts en:",
                    ["Valeurs absolues (‚Ç¨)", "Pourcentages (%)"],
                    horizontal=True
                )

                if view_type == "Valeurs absolues (‚Ç¨)":
                    fig_couts = streamlit_repartition_couts(simulation)
                else:
                    fig_couts = streamlit_repartition_couts_pourcentage(simulation)

                st.pyplot(fig_couts)


                with st.expander("Comprendre ce graphique"):
                    st.markdown("""
                    Ce graphique montre comment le chiffre d'affaires est r√©parti entre les diff√©rentes cat√©gories de co√ªts et le r√©sultat net:

                    - **Salaires et charges**: Co√ªts salariaux incluant les charges patronales
                    - **Frais fixes**: Loyers, √©quipements, services, etc.
                    - **Marge de s√©curit√©**: Marge ajout√©e pour s√©curiser les op√©rations de la SARL
                    - **Imp√¥ts S√©n√©gal**: Imp√¥ts sur les soci√©t√©s pay√©s au S√©n√©gal
                    - **Imp√¥ts France**: Imp√¥ts sur les soci√©t√©s pay√©s en France
                    - **R√©sultat net**: B√©n√©fice net apr√®s tous les co√ªts et imp√¥ts

                    La ligne pointill√©e noire repr√©sente le chiffre d'affaires total.
                    La somme de toutes les aires correspond exactement au chiffre d'affaires.
                    """)

            with viz_tab4:
                st.subheader("Analyse de sensibilit√© des principaux param√®tres")
                with st.spinner("G√©n√©ration de l'analyse de sensibilit√©..."):
                    fig_sens = plt.figure(figsize=(10, 12))
                    simulation.plot_analyse_sensibilite()
                    st.pyplot(fig_sens)

            with viz_tab5:
                st.subheader("√âvolution des effectifs et des co√ªts moyens")
                fig_eff = plt.figure(figsize=(10, 6))
                simulation.plot_evolution_effectifs_couts()
                st.pyplot(fig_eff)

            with viz_tab6:
                st.subheader("Analyse du point mort et du ROI")
                with st.spinner("G√©n√©ration de l'analyse du point mort et du ROI..."):
                    fig_roi = plt.figure(figsize=(12, 6))
                    simulation.plot_point_mort_roi()
                    st.pyplot(fig_roi)

        with tab3:
            st.subheader("Comparaison des sc√©narios")


            st.markdown("**Sc√©nario 1:** Param√®tres d√©finis dans l'interface")
            st.markdown("**Sc√©nario 2:** Salaires plus √©lev√©s (D√©veloppeur: 1500‚Ç¨, Lead: 2000‚Ç¨)")


            fig_comp = streamlit_comparaison_scenarios(simulation, simulation2)
            st.pyplot(fig_comp)


            comparaison = pd.DataFrame({
                'Sc√©nario 1': [simulation.resultats_annuels['Resultat_Net_Consolide'].sum(),
                              simulation.resultats_annuels['Taux_Marge_Nette'].mean()],
                'Sc√©nario 2': [simulation2.resultats_annuels['Resultat_Net_Consolide'].sum(),
                              simulation2.resultats_annuels['Taux_Marge_Nette'].mean()]
            }, index=['R√©sultat total sur 3 ans', 'Taux de marge moyen'])

            st.dataframe(comparaison)
